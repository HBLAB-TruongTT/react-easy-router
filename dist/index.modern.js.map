{"version":3,"file":"index.modern.js","sources":["../src/Store.tsx","../src/components/Loader.tsx","../src/components/Protected.tsx","../src/utils/elementParser.tsx","../src/utils/getRoutes.ts","../src/utils/pathParser.ts","../src/components/Router.tsx"],"sourcesContent":["/**\n * Store using context api\n * @author Yousuf Kalim\n */\nimport React, { useContext, useState, createContext, ReactElement } from 'react';\nimport { AuthContextInterface, ConfigContextInterface, StoreProps } from './types/types';\n\n// Initializing Create Context Hook\nconst authContext = createContext<AuthContextInterface | null>(null);\nconst configContext = createContext<ConfigContextInterface | null>(null);\n\n// We are also initializing useContexts here\n// we only call these functions where we need that data\nexport function Auth(): any {\n  return useContext(authContext);\n}\n\nexport function Config(): any {\n  return useContext(configContext);\n}\n\n/**\n * Store Provider with the config provided by the user\n * @param Function to check if the user is authenticated\n * @param showLoader Boolean to show the loader\n * @param loader Image to show as the loader\n * @param children Children of the component\n * @returns {ReactElement}\n * @constructor StoreProvider\n */\n// Initializing Store Provider\n// eslint-disable-next-line react/prop-types\nexport function StoreProvider({\n  isAuthenticated,\n  showLoader = true,\n  loader = 'https://i.imgur.com/FhvNntt.gif',\n  children,\n}: StoreProps): ReactElement {\n  // Initializing State\n  const [auth, setAuth] = useState(null);\n  const [config] = useState({\n    isAuthenticated,\n    showLoader,\n    loader,\n  });\n\n  // Render\n  return (\n    <authContext.Provider value={{ auth, setAuth }}>\n      <configContext.Provider value={{ config }}>{children}</configContext.Provider>\n    </authContext.Provider>\n  );\n}\n","/**\n * Loader component\n * @author Yousuf Kalim\n */\nimport React, { ReactElement } from 'react';\nimport { Config } from '../Store';\n\n/**\n * Loader\n * @returns {ReactElement}\n * @constructor Loader\n */\nfunction Loader(): ReactElement {\n  const { config } = Config(); // Get the config from the store\n\n  return (\n    <div\n      className=\"loader\"\n      style={{\n        height: '100vh',\n        width: '100%',\n        backgroundColor: 'white',\n        position: 'absolute',\n        zIndex: 1000,\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n      }}\n    >\n      {/* If user has provided the custom loader then show, otherwise show default */}\n      <img src={config.loader} alt=\"loader\" />\n    </div>\n  );\n}\nexport default Loader;\n","/**\n * Protected component to check if the user is authenticated or not and then render the component\n * @author Yousuf Kalim\n */\nimport React, { useEffect, ReactNode, ReactElement } from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { Auth, Config } from '../Store';\nimport Loader from './Loader';\n\n/**\n * Protected\n * @param failureRedirect {string} - The path to redirect if the user is not authenticated\n * @param children {ReactNode} - The component to render if the user is authenticated\n * @returns {ReactElement}\n */\nfunction Protected({\n  failureRedirect = '/',\n  children,\n}: {\n  failureRedirect?: string;\n  children: ReactNode;\n}): ReactElement {\n  const { auth, setAuth } = Auth(); // Get the auth state from the store\n  const {\n    config: { isAuthenticated, showLoader },\n  } = Config(); // Get the config from the store\n\n  useEffect(() => {\n    // Check if the user is authenticated or not\n    if (isAuthenticated) {\n      isAuthenticated()\n        .then((res: any) => {\n          // If the user is authenticated then set the auth state to true\n          setAuth(res);\n        })\n        .catch(() => setAuth(false)); // If the user is not authenticated then set the auth state to false\n    } else {\n      setAuth(false);\n    }\n  }, [isAuthenticated, setAuth]);\n\n  // eslint-disable-next-line no-nested-ternary\n  return auth === null ? ( // If the auth state is null then show the loader\n    showLoader && <Loader />\n  ) : auth ? ( // If the auth state is true then render the children\n    children\n  ) : (\n    // If the auth state is false then redirect to the failureRedirect path\n    <Navigate to={failureRedirect} />\n  );\n}\n\nexport default Protected;\n","/**\n * Parse the routes according to the config provided\n * @author Yousuf Kalim\n */\nimport React, { ReactElement } from 'react';\nimport { Route, Navigate } from 'react-router-dom';\nimport Protected from '../components/Protected';\nimport { RouteProps } from '../types/types';\n\n/**\n * elementParser\n * @param route {Object} - Route object\n * @returns {ReactElement} - Route element\n */\nexport default function elementParser(route: RouteProps): ReactElement {\n  // Navigated route\n  if (route.navigate) {\n    return <Route key={route.path} path={route.path} element={<Navigate to={route.navigate} />} />;\n  }\n\n  // Protected route\n  if (route.protected) {\n    // This will call the protected component and pass the route as props\n    return (\n      <Route\n        key={route.path}\n        path={route.path}\n        element={<Protected failureRedirect={route.failureRedirect}>{route.element}</Protected>}\n      />\n    );\n  }\n\n  // Simple route\n  return <Route key={route.path} path={route.path} element={route.element} />;\n}\n","/**\n * Parse the routes from the config file\n * @author Yousuf Kalim\n */\nimport { ReactElement } from 'react';\nimport pathParser from './pathParser';\nimport elementParser from './elementParser';\nimport { RouteProps } from '../types/types';\n\n/**\n * getRoutes\n * @param routes {Array} - Array of routes\n * @param parentPath {String} - Parent path\n * @returns {*} - Array of rendered routes\n */\nexport default function getRoutes(routes: RouteProps[], parentPath = ''): ReactElement[] {\n  // Loop through the routes and create the route elements\n  const renderedRoutes = routes.map((route) => {\n    // eslint-disable-next-line no-param-reassign\n    route.path = pathParser(parentPath, route.path); // This will create the path by appending parent path if exist\n\n    let children: ReactElement[] = [];\n    if (route.children) {\n      // Recursively call the function to get the children routes\n      children = getRoutes(route.children, route.path);\n    }\n\n    // Create the route element using the element parser\n    return [...children, elementParser(route)];\n  });\n\n  // Return the flatten array of routes and children\n  return renderedRoutes.flat();\n}\n","/**\n * Appending the child path to the parent path\n * @author Yousuf Kalim\n */\n\n/**\n * pathParser\n * @param parent {String} - Parent path\n * @param child {String} - Child path\n * @returns {string|string} - Path\n */\nexport default function pathParser(parent: string, child: string): string {\n  const parentPath = parent.split('/');\n  const childPath = child.split('/');\n\n  // removing the duplicates\n  const path = [...new Set([...parentPath, ...childPath])].join('/');\n\n  // Add the slash at the start of the path\n  return path[0] === '/' ? path : `/${path}`;\n}\n","/**\n * Main router component that handles the routing of the application\n * @author Yousuf Kalim\n */\nimport React, { ReactElement } from 'react';\nimport { Routes } from 'react-router-dom';\nimport { StoreProvider } from '../Store';\nimport getRoutes from '../utils/getRoutes';\nimport { UserProps } from '../types/types';\n\n/**\n * Router\n * @param props Props passed to the component\n * @returns {ReactElement}\n * @constructor Router\n */\nexport default function Router(props: UserProps): ReactElement {\n  return (\n    <StoreProvider {...props}>\n      <Routes>{getRoutes(props.routes)}</Routes>\n    </StoreProvider>\n  );\n}\n"],"names":["authContext","createContext","configContext","Config","useContext","StoreProvider","isAuthenticated","showLoader","loader","children","auth","setAuth","useState","config","React","createElement","Provider","value","Loader","className","style","height","width","backgroundColor","position","zIndex","display","justifyContent","alignItems","src","alt","Protected","failureRedirect","useEffect","then","res","catch","Navigate","to","elementParser","route","Route","navigate","key","path","element","protected","routes","parentPath","renderedRoutes","map","pathParser","parent","child","split","childPath","Set","join","getRoutes","flat","Router","props","Routes"],"mappings":"6XAQA,MAAMA,eAAcC,EAA2C,MAC5CC,eAAGD,EAA6C,MAQnDE,SAAAA,IACd,OAAOC,EAAWF,EACpB,CAagBG,SAAAA,GAAcC,gBAC5BA,EAAeC,WACfA,GAAa,EAAIC,OACjBA,EAAS,kCAAiCC,SAC1CA,IAGA,MAAOC,EAAMC,GAAWC,EAAS,OAC1BC,GAAUD,EAAS,CACxBN,kBACAC,aACAC,wBAIF,OACEM,EAAAC,cAACf,EAAYgB,SAAQ,CAACC,MAAO,CAAEP,OAAMC,yBACnCG,EAAAC,cAACb,EAAcc,SAAQ,CAACC,MAAO,CAAEJ,WAAWJ,GAGlD,CCxCA,SAAeS,IACb,MAAML,OAAEA,GAAWV,iBAEnB,OACEW,EACEC,cAAA,MAAA,CAAAI,UAAU,SACVC,MAAO,CACLC,OAAQ,QACRC,MAAO,OACPC,gBAAiB,QACjBC,SAAU,WACVC,OAAQ,IACRC,QAAS,OACTC,eAAgB,SAChBC,WAAY,wBAIdd,EAAAC,cAAA,MAAA,CAAKc,IAAKhB,EAAOL,OAAQsB,IAAI,WAGnC,CClBA,SAASC,GAAUC,gBACjBA,EAAkB,IAAGvB,SACrBA,IAKA,MAAMC,KAAEA,EAAIC,QAAEA,GFRGP,EAACJ,IEUhBa,QAAQP,gBAAEA,EAAeC,WAAEA,IACzBJ,IAiBJ,OAfA8B,EAAU,KAEJ3B,EACFA,IACG4B,KAAMC,IAELxB,EAAQwB,EAAG,GAEZC,MAAM,IAAMzB,GAAQ,IAEvBA,GAAQ,EACT,EACA,CAACL,EAAiBK,IAGL,OAALD,EACTH,gBAAcO,EAAAC,cAACG,EAAM,MACnBR,EACFD,eAGAK,EAAAC,cAACsB,EAAS,CAAAC,GAAIN,GAElB,CCpCwB,SAAaO,EAACC,gBAEpC,OACS1B,EAAAC,cAAC0B,EADND,EAAME,SACK,CAACC,IAAKH,EAAMI,KAAMA,KAAMJ,EAAMI,KAAMC,qBAAS/B,EAACC,cAAAsB,EAAS,CAAAC,GAAIE,EAAME,YAI5EF,EAAMM,UAGA,CACJH,IAAKH,EAAMI,KACXA,KAAMJ,EAAMI,KACZC,qBAAS/B,EAACC,cAAAgB,EAAU,CAAAC,gBAAiBQ,EAAMR,iBAAkBQ,EAAMK,UAM3D,CAAAF,IAAKH,EAAMI,KAAMA,KAAMJ,EAAMI,KAAMC,QAASL,EAAMK,SAClE,CCnBwB,WAAUE,EAAsBC,EAAa,IAEnE,MAAMC,EAAiBF,EAAOG,IAAKV,IAEjCA,EAAMI,KCRcO,SAAWC,EAAgBC,GACjD,MAAML,EAAaI,EAAOE,MAAM,KAC1BC,EAAYF,EAAMC,MAAM,KAGpBV,EAAG,IAAI,IAAIY,IAAI,IAAIR,KAAeO,KAAaE,KAAK,KAG9D,MAAmB,MAARb,EAAC,GAAaA,EAAW,IAAAA,GACtC,CDDiBO,CAAWH,EAAYR,EAAMI,MAE1C,MAA+B,GAO/B,OANIJ,EAAM/B,WAERA,EAAWiD,EAAUlB,EAAM/B,SAAU+B,EAAMI,OAItC,IAAInC,EAAU8B,EAAcC,GAAM,GAI3C,OAAqBS,EAACU,MACxB,CEjBwB,SAAMC,EAACC,gBAC7B,OACE/C,EAAAC,cAACV,EAAkBwD,EAAAA,GAAAA,gBACjB/C,EAACC,cAAA+C,EAAQ,KAAAJ,EAAUG,EAAMd,SAG/B"}